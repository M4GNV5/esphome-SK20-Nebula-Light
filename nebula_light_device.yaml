# Refs.:
# - https://github.com/M4GNV5/esphome-SK20-Nebula-Light
# - https://github.com/fonix232/esphome_nebula_light
# - https://github.com/kireque/esphome_nebula_light/issues/8

globals:
  - id: global_scene_id
    type: size_t
    restore_value: yes
    initial_value: "0"

light:
  - platform: rgb
    name: "${device_name} Light"
    id: rgb_light
    restore_mode: ALWAYS_OFF
    red: red
    green: green
    blue: blue
    effects:
      - random:
          transition_length: 2.5s
          update_interval: 3s
      - random:
          name: Random Slow
          transition_length: 10s
          update_interval: 5s
      - flicker:
          alpha: 95%
          intensity: 2.5%
      - strobe:
      - pulse:
          transition_length: 30s
          min_brightness: 5%
          max_brightness: 100%

  - platform: monochromatic
    name: "${device_name} Laser"
    icon: mdi:laser-pointer
    id: laser
    output: laser_pwm
    restore_mode: ALWAYS_OFF

  # Button LED (UP/Down position, no brightness control)
  - platform: status_led
    name: "${device_name} Button Status LED"
    id: button_led0
    output: button_led0_gpio
    restore_mode: ALWAYS_OFF
    internal: true

  - platform: monochromatic
    name: "${device_name} Button LED1"
    id: button_led1
    output: button_led1_pwm
    restore_mode: ALWAYS_OFF
    internal: true

fan:
  platform: speed
  name: "${device_name} Motor"
  icon: mdi:rotate-right
  id: motor
  output: motor_pwm
  restore_mode: ALWAYS_OFF

# The template switch representing the device is currently active (laser/light
# or motor is ON).
switch:
  - platform: template
    name: "${device_name} Main Switch"
    id: switch_main
    lambda: "return (id(motor).state || id(laser).current_values.is_on() || id(rgb_light).current_values.is_on());"

    # Turn on the last scene. In a case there is no last scene saved, use the
    # first scene in select (id=0).
    turn_on_action:
      - select.set_index:
          id: select_scene
          index: !lambda "return id(global_scene_id);"

    # Completely turn off the laser, light, motor and button LED
    turn_off_action:
      - fan.turn_off: motor
      - light.turn_off: laser
      - light.turn_off: rgb_light
      - light.turn_off: button_led1
      - script.stop: script_turn_off_timer

      # Remember currently selected scene
      - lambda: |-
          auto index = id(select_scene).active_index();
          if (index.has_value()) {
            id(global_scene_id) = index.value();
          }

output:
  - platform: libretiny_pwm
    id: red
    pin: P9
    inverted: true

  - platform: libretiny_pwm
    id: green
    pin: P24
    inverted: true

  - platform: libretiny_pwm
    id: blue
    pin: P26
    inverted: true

  - platform: libretiny_pwm
    id: laser_pwm
    pin: P8
    inverted: true

  - platform: libretiny_pwm
    id: motor_pwm
    pin: P6
    min_power: 15%

  - platform: gpio
    id: button_led0_gpio
    pin: P1
    inverted: true

  - platform: libretiny_pwm
    id: button_led1_pwm
    pin: P7
    inverted: true

binary_sensor:
  - platform: gpio
    pin:
      number: P14
      mode: INPUT_PULLDOWN_16
      inverted: true
    name: "${device_name} Button"

    # Change the scene on short press/click
    on_click:
      then:
        # Do not switch the scene when all the components (switch_main) are
        # turned off. Allow the scene switching only when the switch_main is
        # on. When the switch is off, just turn it on.
        - if:
            condition:
              - switch.is_on: switch_main
            then:
              - select.next: select_scene
            else:
              - switch.turn_on: switch_main

    # Turn off after a button long press
    on_multi_click:
      - timing:
          - on for at least 1s
        then:
          - switch.turn_off: switch_main

# Turn off the light, laser and motor automatically after a specified delay
script:
  - id: script_turn_off_timer
    mode: restart
    then:
      - delay: 1h
      - switch.turn_off: switch_main

select:
  platform: template
  name: "${device_name} Scene"
  id: select_scene
  options:
    - "Scene - Red"
    - "Scene - Blue"
    - "Scene - Green"
    - "Scene - White"
    - "Scene - Dimmed"
  optimistic: true
  on_value:
    then:
      # Always reset the timer script
      - script.stop: script_turn_off_timer
      - script.execute: script_turn_off_timer

      # Make sure the button LED is ON
      - light.turn_on:
          id: button_led1
          brightness: 60%

      # [INDEX=0]: Scene - Red
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 0);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 50%
                red: 80%
                green: 0%
                blue: 50%
            - light.turn_on:
                id: laser
                brightness: 60%
            - fan.turn_on:
                id: motor
                speed: 40

      # [INDEX=1]: Scene - Blue
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 1);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 50%
                red: 50%
                green: 0%
                blue: 100%
            - light.turn_on:
                id: laser
                brightness: 60%
            - fan.turn_on:
                id: motor
                speed: 40

      # [INDEX=2]: Scene - Green
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 2);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 50%
                red: 0%
                green: 60%
                blue: 30%
            - light.turn_on:
                id: laser
                brightness: 60%
            - fan.turn_on:
                id: motor
                speed: 40

      # [INDEX=3]: Scene - White
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 3);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 100%
                red: 100%
                green: 100%
                blue: 100%
            - light.turn_on:
                id: laser
                brightness: 100%
            - fan.turn_on:
                id: motor
                speed: 50

      # [INDEX=4]: Scene - Dimmed
      - if:
          condition:
            lambda: "return (id(select_scene).active_index() == 4);"
          then:
            - light.turn_on:
                id: rgb_light
                brightness: 30%
                red: 5%
                green: 5%
                blue: 5%
            - light.turn_on:
                id: laser
                brightness: 30%
            - fan.turn_on:
                id: motor
                speed: 10
