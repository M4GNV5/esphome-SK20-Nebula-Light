# Refs.:
# - https://github.com/M4GNV5/esphome-SK20-Nebula-Light
# - https://github.com/fonix232/esphome_nebula_light
# - https://github.com/kireque/esphome_nebula_light/issues/8

substitutions:
  device_identifier: "nebula"
  device_name: "Star projector"


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .my-domain.com
  power_save_mode: none

  ap:
    ssid: "Fallback AP"
    password: !secret wifi_fallback_password

captive_portal:

logger:
  level: INFO

ota:
  password: !secret ota_password

api:
  password: !secret api_password

web_server:
  port: 80

esphome:
  name: "${device_identifier}"

bk72xx:
  board: wb3s

light:
  - platform: rgb
    name: "${device_name} Light"
    id: rgb_light
    restore_mode: ALWAYS_OFF
    red: red
    green: green
    blue: blue
    effects:
      - random:
          transition_length: 2.5s
          update_interval: 3s
      - random:
          name: Random Slow
          transition_length: 10s
          update_interval: 5s
      - flicker:
          alpha: 95%
          intensity: 2.5%
      - strobe:
      - pulse:
          transition_length: 30s
          min_brightness: 5%
          max_brightness: 100%

  - platform: monochromatic
    name: "${device_name} Laser"
    id: laser
    output: laser_pwm
    restore_mode: ALWAYS_OFF

  # Button LED (UP/Down position, no brightness control)
  - platform: status_led
    name: "${device_name} Button Status LED"
    id: button_led0
    output: button_led0_gpio
    restore_mode: ALWAYS_OFF
    internal: true

  - platform: monochromatic
    name: "${device_name} Button LED1"
    id: button_led1
    output: button_led1_pwm
    restore_mode: ALWAYS_OFF
    internal: true

# The template switch representing the device is currently active (laser/light or motor is ON).
switch:
  - platform: template
    name: "${device_name} Main Switch"
    id: switch_main
    lambda: |-
      return (id(motor).state || id(laser).current_values.is_on() || id(rgb_light).current_values.is_on());

    # Set the defaults on turn on
    turn_on_action:
      - fan.turn_on:
          id: motor
          speed: 50
      - light.turn_on:
          id: laser
          brightness: 60%
      - light.turn_on:
          id: rgb_light
          brightness: 50%

    # Completely turn off the lights and motor
    turn_off_action:
      - fan.turn_off: motor
      - light.turn_off: laser
      - light.turn_off: rgb_light

    on_turn_on:
      - light.turn_on:
          id: button_led1
          brightness: 50%
      - script.execute: script_switch_main_timer
    on_turn_off:
      - light.turn_off: button_led1
      - script.stop: script_switch_main_timer

fan:
  platform: speed
  name: "${device_name} Motor"
  id: motor
  output: motor_pwm
  restore_mode: ALWAYS_OFF

output:
  - platform: libretiny_pwm
    id: red
    pin: P9
    inverted: true

  - platform: libretiny_pwm
    id: green
    pin: P24
    inverted: true

  - platform: libretiny_pwm
    id: blue
    pin: P26
    inverted: true

  - platform: libretiny_pwm
    id: laser_pwm
    pin: P8
    inverted: true

  - platform: libretiny_pwm
    id: motor_pwm
    pin: P6
    min_power: 15%

  - platform: gpio
    id: button_led0_gpio
    pin: P1
    inverted: true

  - platform: libretiny_pwm
    id: button_led1_pwm
    pin: P7
    inverted: true

binary_sensor:
  - platform: gpio
    pin:
      number: P14
      mode: INPUT_PULLDOWN_16
      inverted: true
    name: "${device_name} Button"
    on_press:
      then:
        - switch.toggle: switch_main

# Turn off the light, laser and motor automatically after specified delay
script:
  - id: script_switch_main_timer
    mode: restart
    then:
      - delay: 1h
      - switch.turn_off: switch_main
